# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dialog-aritmatika.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from PyQt5.QtGui import QPixmap, QImage, QColor, qRgb
from PyQt5.QtWidgets import QFileDialog, QMessageBox
import cv2
import numpy as np


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1161, 535)
        self.horizontalLayoutWidget = QtWidgets.QWidget(Dialog)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 410, 601, 51))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(
            self.horizontalLayoutWidget)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.penjumlahan = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.penjumlahan.setObjectName("penjumlahan")
        self.horizontalLayout_2.addWidget(self.penjumlahan)
        self.pengurangan = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pengurangan.setObjectName("pengurangan")
        self.horizontalLayout_2.addWidget(self.pengurangan)
        self.pembagian = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pembagian.setObjectName("pembagian")
        self.horizontalLayout_2.addWidget(self.pembagian)
        self.perkalian = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.perkalian.setObjectName("perkalian")
        self.horizontalLayout_2.addWidget(self.perkalian)
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(Dialog)
        self.horizontalLayoutWidget_2.setGeometry(
            QtCore.QRect(30, 10, 381, 31))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(
            self.horizontalLayoutWidget_2)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.gambar1 = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.gambar1.setObjectName("gambar1")
        self.horizontalLayout_3.addWidget(self.gambar1)
        self.gambar2 = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.gambar2.setObjectName("gambar2")
        self.horizontalLayout_3.addWidget(self.gambar2)
        self.simpan = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.simpan.setObjectName("simpan")
        self.horizontalLayout_3.addWidget(self.simpan)
        self.verticalLayoutWidget = QtWidgets.QWidget(Dialog)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(20, 70, 361, 311))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.labelAsal1 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.labelAsal1.setText("")
        self.labelAsal1.setObjectName("labelAsal1")
        self.verticalLayout.addWidget(self.labelAsal1)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(Dialog)
        self.verticalLayoutWidget_2.setGeometry(
            QtCore.QRect(410, 70, 361, 311))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(
            self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.labelAsal2 = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.labelAsal2.setText("")
        self.labelAsal2.setObjectName("labelAsal2")
        self.verticalLayout_2.addWidget(self.labelAsal2)
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(Dialog)
        self.verticalLayoutWidget_3.setGeometry(
            QtCore.QRect(780, 70, 361, 311))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(
            self.verticalLayoutWidget_3)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.labelHasil = QtWidgets.QLabel(self.verticalLayoutWidget_3)
        self.labelHasil.setText("")
        self.labelHasil.setObjectName("labelHasil")
        self.verticalLayout_3.addWidget(self.labelHasil)
        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(Dialog)
        self.horizontalLayoutWidget_3.setGeometry(
            QtCore.QRect(10, 470, 601, 41))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.horizontalLayout = QtWidgets.QHBoxLayout(
            self.horizontalLayoutWidget_3)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.And = QtWidgets.QPushButton(self.horizontalLayoutWidget_3)
        self.And.setObjectName("And")
        self.horizontalLayout.addWidget(self.And)
        self.Or = QtWidgets.QPushButton(self.horizontalLayoutWidget_3)
        self.Or.setObjectName("Or")
        self.horizontalLayout.addWidget(self.Or)
        self.Xor = QtWidgets.QPushButton(self.horizontalLayoutWidget_3)
        self.Xor.setObjectName("Xor")
        self.horizontalLayout.addWidget(self.Xor)
        self.Not = QtWidgets.QPushButton(self.horizontalLayoutWidget_3)
        self.Not.setObjectName("Not")
        self.horizontalLayout.addWidget(self.Not)

        self.gambar1.clicked.connect(self.buka_gambar1)
        self.gambar2.clicked.connect(self.buka_gambar2)
        self.penjumlahan.clicked.connect(self.operasi_penjumlahan)
        self.perkalian.clicked.connect(self.operasi_perkalian)
        self.pengurangan.clicked.connect(self.operasi_pengurangan)
        self.pembagian.clicked.connect(self.operasi_pembagian)
        self.simpan.clicked.connect(self.operasi_simpan)
        self.And.clicked.connect(self.operasi_and)
        self.Or.clicked.connect(self.operasi_or)
        self.Xor.clicked.connect(self.operasi_xor)
        self.Not.clicked.connect(self.operasi_not)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def buka_gambar1(self):
        # Buka dialog untuk memilih file gambar
        filename = QFileDialog.getOpenFileName(
            None, "Pilih gambar", "", "Image files (*.jpg *.png)")

        # Jika file gambar dipilih
        if filename:
            # Konversi objek filename menjadi string
            filename_str = str(filename[0])

            # Baca gambar
            image = cv2.imread(filename_str)

            # Konversi gambar dari BGR ke RGB
            image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

            # Konversi gambar menjadi format QImage
            qimage = QImage(image_rgb.data, image_rgb.shape[1], image_rgb.shape[0],
                            image_rgb.shape[2] * image_rgb.shape[1], QImage.Format_RGB888)

            self.labelAsal1.setPixmap(QPixmap(qimage))
            self.labelAsal1.setScaledContents(True)

    def buka_gambar2(self):
        # Buka dialog untuk memilih file gambar
        filename = QFileDialog.getOpenFileName(
            None, "Pilih gambar", "", "Image files (*.jpg *.png)")

        # Jika file gambar dipilih
        if filename:
            # Konversi objek filename menjadi string
            filename_str = str(filename[0])

            # Baca gambar
            image = cv2.imread(filename_str)

            # Konversi gambar dari BGR ke RGB
            image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

            # Konversi gambar menjadi format QImage
            qimage = QImage(image_rgb.data, image_rgb.shape[1], image_rgb.shape[0],
                            image_rgb.shape[2] * image_rgb.shape[1], QImage.Format_RGB888)
            self.labelAsal2.setPixmap(QPixmap(qimage))
            self.labelAsal2.setScaledContents(True)

    def operasi_penjumlahan(self):
        pixmap1 = self.labelAsal1.pixmap()
        if pixmap1 is None:
            return  # LabelAsal1 tidak memiliki gambar

        # Mendapatkan pixmap dari labelAsal2
        pixmap2 = self.labelAsal2.pixmap()
        if pixmap2 is None:
            return  # LabelAsal2 tidak memiliki gambar

        # Mengambil QImage dari pixmap1
        image1 = pixmap1.toImage()

        # Mengambil QImage dari pixmap2
        image2 = pixmap2.toImage()

        # Memastikan kedua gambar memiliki ukuran yang sama

        # Mengambil dimensi gambar
        width = image1.width()
        height = image1.height()

        # Inisialisasi QImage baru untuk menyimpan hasil penjumlahan
        result_image = QImage(width, height, QImage.Format_RGB888)

        # Lakukan penjumlahan pixel per pixel
        for x in range(width):
            for y in range(height):
                pixel1 = QColor(image1.pixel(x, y))
                pixel2 = QColor(image2.pixel(x, y))

                # Penjumlahan komponen RGB
                r = min(255, pixel1.red() + pixel2.red())
                g = min(255, pixel1.green() + pixel2.green())
                b = min(255, pixel1.blue() + pixel2.blue())

                # Set pixel hasil ke QImage
                result_image.setPixel(x, y, qRgb(r, g, b))

        # Konversi QImage hasil ke QPixmap
        result_pixmap = QPixmap.fromImage(result_image)

        # Tampilkan hasil di labelHasil
        self.labelHasil.setPixmap(result_pixmap)
        self.labelHasil.setScaledContents(True)

    def operasi_perkalian(self):
        # Dapatkan gambar dari labelAsal1
        pixmap1 = self.labelAsal1.pixmap()
        image1 = pixmap1.toImage()
        width1 = image1.width()
        height1 = image1.height()
        bytes_per_line1 = image1.bytesPerLine()

        # Dapatkan gambar dari labelAsal2
        pixmap2 = self.labelAsal2.pixmap()
        image2 = pixmap2.toImage()
        width2 = image2.width()
        height2 = image2.height()
        bytes_per_line2 = image2.bytesPerLine()
        # Buat gambar hasil
        result_image = QImage(width1, height1, QImage.Format_RGB888)

        # Lakukan perkalian piksel per piksel
        for y in range(height1):
            for x in range(width1):
                # Dapatkan warna piksel dari kedua gambar
                color1 = QColor(image1.pixel(x, y))
                color2 = QColor(image2.pixel(x, y))

                # Hitung perkalian warna
                new_color = QColor(
                    min((color1.red() * color2.red()) // 255, 255),
                    min((color1.green() * color2.green()) // 255, 255),
                    min((color1.blue() * color2.blue()) // 255, 255)
                )

                # Set piksel pada gambar hasil
                result_image.setPixel(x, y, new_color.rgb())

        # Tampilkan gambar hasil di labelHasil
        self.labelHasil.setPixmap(QPixmap.fromImage(result_image))
        self.labelHasil.setScaledContents(True)

    def operasi_pengurangan(self):
        # Dapatkan gambar dari labelAsal1
        pixmap1 = self.labelAsal1.pixmap()
        image1 = pixmap1.toImage()
        width1 = image1.width()
        height1 = image1.height()
        bytes_per_line1 = image1.bytesPerLine()

        # Dapatkan gambar dari labelAsal2
        pixmap2 = self.labelAsal2.pixmap()
        image2 = pixmap2.toImage()
        width2 = image2.width()
        height2 = image2.height()
        bytes_per_line2 = image2.bytesPerLine()

        # Buat gambar hasil
        result_image = QImage(width1, height1, QImage.Format_RGB888)

        # Lakukan pengurangan piksel per piksel
        for y in range(height1):
            for x in range(width1):
                # Dapatkan warna piksel dari kedua gambar
                color1 = QColor(image1.pixel(x, y))
                color2 = QColor(image2.pixel(x, y))

                # Hitung pengurangan warna
                new_color = QColor(
                    max((color1.red() - color2.red()), 0),
                    max((color1.green() - color2.green()), 0),
                    max((color1.blue() - color2.blue()), 0)
                )

                # Set piksel pada gambar hasil
                result_image.setPixel(x, y, new_color.rgb())

        # Tampilkan gambar hasil di labelHasil
        self.labelHasil.setPixmap(QPixmap.fromImage(result_image))
        self.labelHasil.setScaledContents(True)

    def operasi_pembagian(self):
        # Dapatkan gambar dari labelAsal1
        pixmap1 = self.labelAsal1.pixmap()
        image1 = pixmap1.toImage()
        width1 = image1.width()
        height1 = image1.height()
        bytes_per_line1 = image1.bytesPerLine()

        # Dapatkan gambar dari labelAsal2
        pixmap2 = self.labelAsal2.pixmap()
        image2 = pixmap2.toImage()
        width2 = image2.width()
        height2 = image2.height()
        bytes_per_line2 = image2.bytesPerLine()

        # Buat gambar hasil
        result_image = QImage(width1, height1, QImage.Format_RGB888)

        # Lakukan pembagian piksel per piksel
        for y in range(height1):
            for x in range(width1):
                # Dapatkan warna piksel dari kedua gambar
                color1 = QColor(image1.pixel(x, y))
                color2 = QColor(image2.pixel(x, y))

                # Hindari pembagian oleh nol
                if color2.red() == 0 or color2.green() == 0 or color2.blue() == 0:
                    new_color = QColor(0, 0, 0)
                else:
                    # Hitung pembagian warna
                    new_color = QColor(
                        min(int((color1.red() / color2.red()) * 255), 255),
                        min(int((color1.green() / color2.green()) * 255), 255),
                        min(int((color1.blue() / color2.blue()) * 255), 255)
                    )

                # Set piksel pada gambar hasil
                result_image.setPixel(x, y, new_color.rgb())

        # Tampilkan gambar hasil di labelHasil
        self.labelHasil.setPixmap(QPixmap.fromImage(result_image))
        self.labelHasil.setScaledContents(True)

    def operasi_simpan(self):
        # Buka dialog untuk memilih lokasi penyimpanan
        filename, _ = QFileDialog.getSaveFileName(
            None, "Simpan Gambar", "", "Image files (*.png *.jpg)")

        # Jika lokasi penyimpanan dipilih
        if filename:
            # Dapatkan gambar dari labelHasil pada Ui_MainWindow
            pixmap = self.labelHasil.pixmap()
            image = pixmap.toImage()

            # Simpan gambar ke lokasi yang dipilih
            if image.save(filename):
                print('tersimpan')
            else:
                print('gagal')

    def operasi_and(self):
        # Ambil gambar dari labelAsal1
        pixmap1 = self.labelAsal1.pixmap()
        image1 = pixmap1.toImage()

        # Ambil gambar dari labelAsal2
        pixmap2 = self.labelAsal2.pixmap()
        image2 = pixmap2.toImage()

        # Pastikan kedua gambar memiliki dimensi yang sama
        if image1.size() == image2.size():
            # Buat gambar hasil yang kosong dengan dimensi yang sama
            width = image1.width()
            height = image1.height()
            result_image = QImage(width, height, QImage.Format_RGB888)

            # Lakukan operasi "AND" piksel per piksel
            for x in range(width):
                for y in range(height):
                    # Dapatkan warna piksel dari kedua gambar
                    color1 = QColor(image1.pixel(x, y))
                    color2 = QColor(image2.pixel(x, y))

                    # Lakukan operasi "AND" pada komponen warna (R, G, B)
                    new_red = color1.red() & color2.red()
                    new_green = color1.green() & color2.green()
                    new_blue = color1.blue() & color2.blue()

                    # Set piksel pada gambar hasil
                    result_color = QColor(new_red, new_green, new_blue)
                    result_image.setPixel(x, y, result_color.rgb())

            # Tampilkan hasilnya pada labelHasil
            self.labelHasil.setPixmap(QPixmap(result_image))
            self.labelHasil.setScaledContents(True)
        else:
            QMessageBox.warning(
                None, "Peringatan", "Dimensi kedua gambar tidak sama, operasi AND tidak dapat dilakukan.")

    def operasi_or(self):
        # Ambil gambar dari labelAsal1
        pixmap1 = self.labelAsal1.pixmap()
        image1 = pixmap1.toImage()

        # Ambil gambar dari labelAsal2
        pixmap2 = self.labelAsal2.pixmap()
        image2 = pixmap2.toImage()

        # Pastikan kedua gambar memiliki dimensi yang sama
        if image1.size() == image2.size():
            # Buat gambar hasil yang kosong dengan dimensi yang sama
            width = image1.width()
            height = image1.height()
            result_image = QImage(width, height, QImage.Format_RGB888)

            # Lakukan operasi "OR" piksel per piksel
            for x in range(width):
                for y in range(height):
                    # Dapatkan warna piksel dari kedua gambar
                    color1 = QColor(image1.pixel(x, y))
                    color2 = QColor(image2.pixel(x, y))

                    # Lakukan operasi "OR" pada komponen warna (R, G, B)
                    new_red = color1.red() | color2.red()
                    new_green = color1.green() | color2.green()
                    new_blue = color1.blue() | color2.blue()

                    # Set piksel pada gambar hasil
                    result_color = QColor(new_red, new_green, new_blue)
                    result_image.setPixel(x, y, result_color.rgb())

            # Tampilkan hasilnya pada labelHasil
            self.labelHasil.setPixmap(QPixmap(result_image))
            self.labelHasil.setScaledContents(True)
        else:
            QMessageBox.warning(
                None, "Peringatan", "Dimensi kedua gambar tidak sama, operasi OR tidak dapat dilakukan.")

    def operasi_xor(self):
        # Ambil gambar dari labelAsal1
        pixmap1 = self.labelAsal1.pixmap()
        image1 = pixmap1.toImage()

        # Ambil gambar dari labelAsal2
        pixmap2 = self.labelAsal2.pixmap()
        image2 = pixmap2.toImage()

        # Pastikan kedua gambar memiliki dimensi yang sama
        if image1.size() == image2.size():
            # Buat gambar hasil yang kosong dengan dimensi yang sama
            width = image1.width()
            height = image1.height()
            result_image = QImage(width, height, QImage.Format_RGB888)

            # Lakukan operasi XOR piksel per piksel
            for x in range(width):
                for y in range(height):
                    # Dapatkan warna piksel dari kedua gambar
                    color1 = QColor(image1.pixel(x, y))
                    color2 = QColor(image2.pixel(x, y))

                    # Lakukan operasi XOR pada komponen warna (R, G, B)
                    new_red = color1.red() ^ color2.red()
                    new_green = color1.green() ^ color2.green()
                    new_blue = color1.blue() ^ color2.blue()

                    # Set piksel pada gambar hasil
                    result_color = QColor(new_red, new_green, new_blue)
                    result_image.setPixel(x, y, result_color.rgb())

            # Tampilkan hasilnya pada labelHasil
            self.labelHasil.setPixmap(QPixmap(result_image))
            self.labelHasil.setScaledContents(True)
        else:
            QMessageBox.warning(
                None, "Peringatan", "Dimensi kedua gambar tidak sama, operasi XOR tidak dapat dilakukan.")

    def operasi_not(self):
        # Ambil gambar dari labelAsal1
        pixmap1 = self.labelAsal1.pixmap()
        image1 = pixmap1.toImage()

        # Buat gambar hasil yang kosong dengan dimensi yang sama
        width = image1.width()
        height = image1.height()
        result_image = QImage(width, height, QImage.Format_RGB888)

        # Lakukan operasi NOT piksel per piksel pada labelAsal1
        for x in range(width):
            for y in range(height):
                # Dapatkan warna piksel dari labelAsal1
                color1 = QColor(image1.pixel(x, y))

                # Lakukan operasi NOT pada komponen warna (R, G, B)
                new_red = 255 - color1.red()
                new_green = 255 - color1.green()
                new_blue = 255 - color1.blue()

                # Set piksel pada gambar hasil
                result_color = QColor(new_red, new_green, new_blue)
                result_image.setPixel(x, y, result_color.rgb())

        # Tampilkan hasil operasi NOT pada labelHasil
        self.labelHasil.setPixmap(QPixmap(result_image))
        self.labelHasil.setScaledContents(True)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.penjumlahan.setText(_translate("Dialog", "Penjumlahan"))
        self.pengurangan.setText(_translate("Dialog", "Pengurangan"))
        self.pembagian.setText(_translate("Dialog", "Pembagian"))
        self.perkalian.setText(_translate("Dialog", "Perkalian"))
        self.gambar1.setText(_translate("Dialog", "Gambar 1"))
        self.gambar2.setText(_translate("Dialog", "Gambar 2"))
        self.simpan.setText(_translate("Dialog", "Simpan"))
        self.And.setText(_translate("Dialog", "AND"))
        self.Or.setText(_translate("Dialog", "OR"))
        self.Xor.setText(_translate("Dialog", "XOR"))
        self.Not.setText(_translate("Dialog", "NOT"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
